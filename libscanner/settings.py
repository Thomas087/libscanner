"""
Django settings for libscanner project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-y9%mk+xyws959n^hv+4$i90h%5m2)os$2_b^neo4mksb*t0o3j")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = ['https://animalibscanner-0bc484989484.herokuapp.com/', 'animalibscanner-0bc484989484.herokuapp.com','scan.activoice.online', '127.0.0.1']  # Configure this properly for production


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "whitenoise.runserver_nostatic",
    "scraper",
    "llm_api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "libscanner.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "libscanner.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration
DATABASES = {
    "default": dj_database_url.parse(
        os.environ.get('DATABASE_URL', 'postgresql://thomas_duqi@localhost:5432/libscanner')
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "fr-fr"

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Data upload settings
# Increase the limit for form fields to handle large admin operations
DATA_UPLOAD_MAX_NUMBER_FIELDS = 100000
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB


# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'scraper.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'scraper': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

try:
    from .local_settings import *
except ImportError:
    pass

# Celery Configuration
# Use proper Redis URL parsing for Heroku compatibility
import urllib.parse

def get_redis_url():
    """Get Redis URL with proper parsing for Heroku."""
    # Heroku Redis uses REDISCLOUD_URL, fallback to REDIS_URL for local development
    redis_url = os.environ.get('REDISCLOUD_URL') or os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
    
    # For Heroku Redis, ensure proper URL format
    if redis_url.startswith('redis://'):
        try:
            parsed = urllib.parse.urlparse(redis_url)
            # Reconstruct URL with proper components for Heroku
            if parsed.password:
                # Heroku Redis format: redis://:password@hostname:port/db
                return f"redis://:{parsed.password}@{parsed.hostname}:{parsed.port}{parsed.path}"
            else:
                # Local development format
                return redis_url
        except Exception:
            # Fallback to original URL if parsing fails
            return redis_url
    return redis_url

# Get properly formatted Redis URL
REDIS_URL = get_redis_url()
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL

# Celery settings optimized for Heroku
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes - REMOVED to allow unlimited task execution
# CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes - REMOVED to allow unlimited task execution
CELERY_WORKER_PREFETCH_MULTIPLIER = 1

# Disable eager execution on Heroku (enable background tasks)
CELERY_TASK_ALWAYS_EAGER = os.environ.get('CELERY_TASK_ALWAYS_EAGER', 'False').lower() == 'true'

# Heroku-specific Redis connection settings
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 20
CELERY_BROKER_CONNECTION_RETRY_DELAY = 1.0

# Redis connection pool settings for Heroku
CELERY_BROKER_POOL_LIMIT = 10
CELERY_BROKER_HEARTBEAT = 30
CELERY_BROKER_CONNECTION_TIMEOUT = 30
CELERY_BROKER_CONNECTION_MAX_RETRIES = 20

# Result backend settings
CELERY_RESULT_BACKEND_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND_CONNECTION_RETRY = True
CELERY_RESULT_BACKEND_CONNECTION_MAX_RETRIES = 20
CELERY_RESULT_BACKEND_CONNECTION_RETRY_DELAY = 1.0

# Task execution settings for Heroku
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_DISABLE_RATE_LIMITS = True

#Force redeploy